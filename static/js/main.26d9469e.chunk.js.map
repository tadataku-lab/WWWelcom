{"version":3,"sources":["components/Header/Header.tsx","components/GoogleMap/GoogleMap.tsx","logic/hotpepper.ts","logic/distance.ts","components/Toasts/Toasts.tsx","App.tsx","logic/geolocation.ts","serviceWorker.ts","index.tsx"],"names":["Header","Navbar","fixed","id","expand","variant","Brand","href","Toggle","aria-controls","Collapse","Nav","className","Link","NavDropdown","title","Item","Divider","TestMap","text","GoogleMap","style","height","width","bootstrapURLKeys","key","process","defaultCenter","lat","lng","defaultZoom","fetchHotPepper","query","callbuck","query_str","Object","keys","reduce","pre","window","sc","document","createElement","type","src","parent","getElementsByTagName","parentNode","insertBefore","calcDistance","origin","destination","google","maps","geometry","spherical","computeDistanceBetween","LatLng","Toast","props","onClick","e","closeButton","Math","round","dist","Body","body","Toasts","group","credit","toasts","map","toast","HotpepperCredit","List","Row","margin","placelists","placelist","Col","md","lg","setPagetype","Detail","sm","padding","App","setFunc","useState","setPlacelists","pagetype","crd","setCrd","navigator","geolocation","getCurrentPosition","pos","coords","useEffect","latitude","longitude","range","order","json","console","log","shop_info","results","shop","name","catch","sort","a","b","p","concat","marginTop","Container","fluid","visibility","position","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","ReactDOM","render","getElementById","URL","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.26d9469e.chunk.js","sourcesContent":["import React from 'react';\nimport {Nav, Navbar, NavDropdown} from 'react-bootstrap';\nimport './Header.css';\n\nconst Header: React.FC = () => {\n  return (\n    <Navbar fixed='top' id='Header' expand=\"lg\" variant='dark' >\n      <Navbar.Brand href=\"#home\">WWWelcome</Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      <Navbar.Collapse id=\"basic-navbar-nav\">\n        <Nav className=\"mr-auto\">\n          <Nav.Link href=\"#home\">Home</Nav.Link>\n          <Nav.Link href=\"#link\">Link</Nav.Link>\n          <NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\n            <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\n            <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\n            <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\n            <NavDropdown.Divider />\n            <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\n          </NavDropdown>\n        </Nav>\n      </Navbar.Collapse>\n    </Navbar>\n  )\n};\n\nexport default Header;","import React from 'react';\nimport GoogleMapReact from 'google-map-react';\n\nconst TestMap = ({text}: {lat: number, lng: number, text: string}) => <div>{text}</div>;\n\nconst GoogleMap: React.FC = () => {\n  return (\n    <div style={{ height: '80vh', width: '100%'}}>\n      <GoogleMapReact bootstrapURLKeys={{key: process.env['REACT_APP_GOOGLEMAPS_API_KEY']!}} defaultCenter={{lat: 59.95, lng: 30.33}} defaultZoom={11}>\n        <TestMap lat={59.955413} lng={30.337844} text=\"My Marker\"/>\n      </GoogleMapReact>\n    </div>\n  );\n};\n\nexport default GoogleMap;","// Hot Pepper API ( https://webservice.recruit.co.jp/hotpepper/reference.html )\n\nexport type HotPepperQuery = {\n  lat?: number,\n  lng?: number,\n  range?: number,\n  order?: number\n};\n\nexport type HotPepperResult = {\n  results: {\n    api_version: string;\n    results_available: number;\n    results_returned: number;\n    results_start: number;\n    shop: Shop[];\n  }\n};\n\ntype Shop = {\n  id: string,\n  name: string;\n  logo_image: string,\n  name_kana: string,\n  address: string,\n  station_name: string,\n  ktai_coupon: number,\n  lat: number;\n  lng: number;\n  catch: string;\n  photo: {pc: {l: string, m:string, s: string}}\n};\n\nexport const fetchHotPepper = (query: HotPepperQuery, callbuck: (json: HotPepperResult) => void) => {\n  const query_str = Object.keys(query).reduce((pre:string, key: string) => `${pre}&${key}=${query[key as keyof HotPepperQuery]}`, '');\n  (window as any)['HotPepperCallBack'] = callbuck;\n  const sc = document.createElement(\"script\");\n  sc.type = 'text/javascript';\n  sc.src = `https://webservice.recruit.co.jp/hotpepper/gourmet/v1/?key=${process.env['REACT_APP_HOTPEPPER_API_KEY']}${query_str}&format=jsonp&callback=HotPepperCallBack`;\n  const parent = document.getElementsByTagName(\"script\")[0];\n  parent!.parentNode!.insertBefore(sc, parent);\n};","\nexport const calcDistance = (origin: { lat: number, lng: number }, destination: { lat: number, lng: number }) => {\n  return google.maps.geometry.spherical.computeDistanceBetween(new google.maps.LatLng(origin.lat, origin.lng), new google.maps.LatLng(destination.lat, destination.lng));\n}","import React from 'react';\nimport { Toast as BToast } from 'react-bootstrap';\nimport \"./Toasts.css\";\n\nexport type ToastData = {\n  title: string;\n  dist: number;\n  body: string;\n};\n\nexport type ToastProps = ToastData & {\n  onClick: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void\n};\n\nconst Toast: React.FC<ToastProps> = (props: ToastProps) => {\n  return (\n    <BToast onClick={(e) => props.onClick(e)}>\n      <BToast.Header closeButton={false}>\n        <strong className='mr-auto'>{props.title}</strong>\n        <small>{`${Math.round(props.dist)} m`}</small>\n      </BToast.Header>\n      <BToast.Body>\n        {props.body}\n      </BToast.Body>\n    </BToast>\n  );\n};\n\nexport type ToastsProps = {\n  toasts: ToastData[];\n  group: string;\n  credit?: JSX.Element;\n  onClick: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void\n};\n\nconst Toasts: React.FC<ToastsProps> = (props: ToastsProps) => {\n  return (\n    <div className=\"toasts\">\n      <BToast className=\"Group-header\">\n        <BToast.Body>\n          <strong className='mr-auto'>{props.group}</strong>\n          <small>{props.credit}</small>\n        </BToast.Body>\n      </BToast>\n      {props.toasts.map((toast, key) => <Toast key={key} onClick={props.onClick} {...toast}/>)}\n    </div>\n  );\n};\n\nexport default Toasts;\n","import React, { useState, useEffect } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Header from './components/Header/Header';\nimport GoogleMap from './components/GoogleMap/GoogleMap';\nimport { fetchHotPepper, HotPepperResult } from './logic/hotpepper';\nimport { getPosition } from './logic/geolocation';\nimport { calcDistance } from './logic/distance';\nimport Toasts, {ToastData} from './components/Toasts/Toasts';\nimport { Container, Row, Col } from 'react-bootstrap';\n\nconst HotpepperCredit = <> Powered by <a href=\"http://webservice.recruit.co.jp/\">ホットペッパー Webサービス</a> </>;\n\nexport type PageType = 'list' | 'detail';\n\ntype PlaceList = {\n  group: string,\n  toasts: ToastData[],\n  credit: JSX.Element\n}\n\ntype ListProps = {\n  placelists: PlaceList[],\n  setPagetype: (ty: PageType) => void\n}\n\nconst List: React.FC<ListProps> = (props) => {\n  return(\n    <Row style={{ margin: 0 }}>\n      {props.placelists.map((placelist, key) => (\n        <Col key={key} md={6} lg={3}>\n          <Toasts toasts={placelist.toasts} group={placelist.group} credit={placelist.credit} onClick={() => props.setPagetype('detail')} />\n        </Col>\n      ))}\n    </Row>\n  );\n};\n\nconst Detail: React.FC = () => {\n  return (\n    <Row style={{ margin: 0 }}>\n      <Col sm={12} md={8} style={{ padding: 0 }}>\n        <GoogleMap />\n      </Col>\n    </Row>\n  )\n};\n\nconst App: React.FC = () => {\n  const [placelists, setPlacelists] = useState([] as PlaceList[]);\n  const [pagetype, setPagetype] = useState('list' as PageType);\n  const [crd, setCrd] = useState(null as Coordinates | null);\n  getPosition(setCrd);\n\n  useEffect(() => {\n    setPlacelists([]);\n    if(crd){\n      fetchHotPepper({ lat: crd.latitude, lng: crd.longitude, range: 5, order: 4 }, (json: HotPepperResult) => {\n        console.log(json);\n        const shop_info: ToastData[] = json.results.shop.map((shop) => {\n          return { title: shop.name, dist: calcDistance({ lat: crd.latitude, lng: crd.longitude }, { lat: shop.lat, lng: shop.lng }), body: shop.catch }\n        });\n        shop_info.sort((a, b) => {\n          if (a.dist < b.dist) {\n            return -1;\n          } else if (a.dist > b.dist) {\n            return 1;\n          } else {\n            return 0;\n          }\n        });\n        setPlacelists(p => p.concat([{ group: '付近の飲食店', toasts: shop_info, credit: HotpepperCredit }]))\n      });\n      fetchHotPepper({ lat: crd.latitude, lng: crd.longitude, range: 5, order: 4 }, (json: HotPepperResult) => {\n        console.log(json);\n        const shop_info: ToastData[] = json.results.shop.map((shop) => {\n          return { title: shop.name, dist: calcDistance({ lat: crd.latitude, lng: crd.longitude }, { lat: shop.lat, lng: shop.lng }), body: shop.catch }\n        });\n        shop_info.sort((a, b) => {\n          if(a.dist < b.dist){\n            return -1;\n          }else if(a.dist > b.dist){\n            return 1;\n          }else{\n            return 0;\n          }\n        });\n        setPlacelists(p => p.concat([{ group: '付近の飲食店', toasts: shop_info, credit: HotpepperCredit }]))\n      });\n    }\n    \n  }, [crd]);\n\n  return (\n    <div className=\"App\">\n      <Header/>\n      <div style={{marginTop: '56px'}}>\n        <Container fluid={true} style={{ visibility: pagetype === 'list' ? 'visible' : 'hidden', position: 'absolute'}} >\n          <List placelists={placelists} setPagetype={setPagetype}/>\n        </Container>\n        <Container fluid={true} style={{ visibility: pagetype === 'detail' ? 'visible' : 'hidden', position: 'absolute', width: '100%', height: '100%'}} >\n          <Detail />\n        </Container>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","\n\nexport const getPosition = (setFunc: (crd: Coordinates) => void) => {\n  const success: PositionCallback = (pos: Position) => {\n    setFunc(pos.coords)\n  };\n  navigator.geolocation.getCurrentPosition(success);\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}