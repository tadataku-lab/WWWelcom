{"version":3,"sources":["components/Header/Header.tsx","components/GoogleMap/GoogleMap.tsx","components/Toasts/Toasts.tsx","App.tsx","logic/hotpepper.ts","serviceWorker.ts","index.tsx"],"names":["Header","Navbar","id","expand","variant","Brand","href","Toggle","aria-controls","Collapse","Nav","className","Link","NavDropdown","title","Item","Divider","TestMap","text","GoogleMap","style","height","width","bootstrapURLKeys","key","process","defaultCenter","lat","lng","defaultZoom","Toast","props","onClick","e","closeButton","info","Body","body","Toasts","group","credit","toasts","map","toast","List","Row","margin","Col","sm","md","padding","setPagetype","Detail","App","useState","setToasts","pagetype","useEffect","query","callbuck","query_str","Object","keys","reduce","pre","window","sc","document","createElement","type","src","parent","getElementsByTagName","parentNode","insertBefore","fetchHotPepper","range","order","json","console","log","shop_info","results","shop","name","catch","Container","fluid","visibility","position","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","ReactDOM","render","getElementById","URL","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6e7f3577.chunk.js","sourcesContent":["import React from 'react';\nimport {Nav, Navbar, NavDropdown} from 'react-bootstrap';\nimport './Header.css';\n\nconst Header: React.FC = () => {\n  return (\n    <Navbar id='Header' expand=\"lg\" variant='dark' >\n      <Navbar.Brand href=\"#home\">WWWelcome</Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      <Navbar.Collapse id=\"basic-navbar-nav\">\n        <Nav className=\"mr-auto\">\n          <Nav.Link href=\"#home\">Home</Nav.Link>\n          <Nav.Link href=\"#link\">Link</Nav.Link>\n          <NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\n            <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\n            <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\n            <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\n            <NavDropdown.Divider />\n            <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\n          </NavDropdown>\n        </Nav>\n      </Navbar.Collapse>\n    </Navbar>\n  )\n};\n\nexport default Header;","import React from 'react';\nimport GoogleMapReact from 'google-map-react';\n\nconst TestMap = ({text}: {lat: number, lng: number, text: string}) => <div>{text}</div>;\n\nconst GoogleMap: React.FC = () => {\n  return (\n    <div style={{ height: '80vh', width: '100%'}}>\n      <GoogleMapReact bootstrapURLKeys={{key: process.env['REACT_APP_GOOGLEMAPS_API_KEY']!}} defaultCenter={{lat: 59.95, lng: 30.33}} defaultZoom={11}>\n        <TestMap lat={59.955413} lng={30.337844} text=\"My Marker\"/>\n      </GoogleMapReact>\n    </div>\n  );\n};\n\nexport default GoogleMap;","import React from 'react';\nimport { Toast as BToast } from 'react-bootstrap';\nimport \"./Toasts.css\";\n\nexport type ToastData = {\n  title: string;\n  info: string;\n  body: string;\n};\n\nexport type ToastProps = ToastData & {\n  onClick: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void\n};\n\nconst Toast: React.FC<ToastProps> = (props: ToastProps) => {\n  return (\n    <BToast onClick={(e) => props.onClick(e)}>\n      <BToast.Header closeButton={false}>\n        <strong className='mr-auto'>{props.title}</strong>\n        <small>{props.info}</small>\n      </BToast.Header>\n      <BToast.Body>\n        {props.body}\n      </BToast.Body>\n    </BToast>\n  );\n};\n\nexport type ToastsProps = {\n  toasts: ToastData[];\n  group: string;\n  credit?: JSX.Element;\n  onClick: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void\n};\n\nconst Toasts: React.FC<ToastsProps> = (props: ToastsProps) => {\n  return (\n    <div className=\"toasts\">\n      <BToast className=\"Group-header\">\n        <BToast.Body>\n          <strong className='mr-auto'>{props.group}</strong>\n          <small>{props.credit}</small>\n        </BToast.Body>\n      </BToast>\n      {props.toasts.map((toast, key) => <Toast key={key} onClick={props.onClick} {...toast}/>)}\n    </div>\n  );\n};\n\nexport default Toasts;\n","import React, { useState, useEffect } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Header from './components/Header/Header';\nimport GoogleMap from './components/GoogleMap/GoogleMap';\nimport { fetchHotPepper, HotPepperResult } from './logic/hotpepper';\nimport Toasts, {ToastData} from './components/Toasts/Toasts';\nimport { Container, Row, Col } from 'react-bootstrap';\n\nexport type PageType = 'list' | 'detail';\n\ntype ListProps = {\n  toasts: ToastData[],\n  setPagetype: (ty: PageType) => void\n}\n\nconst List: React.FC<ListProps> = (props) => {\n  return(\n    <Row style={{ margin: 0 }}>\n      <Col sm={12} md={4} style={{ padding: 0 }}>\n        <Toasts toasts={props.toasts} group={'付近の飲食店'} credit={(<> Powered by <a href=\"http://webservice.recruit.co.jp/\">ホットペッパー Webサービス</a> </>)} onClick={() => props.setPagetype('detail')} />\n      </Col>\n      <Col sm={12} md={8} style={{ padding: 0 }}>\n        <GoogleMap />\n      </Col>\n    </Row>\n  );\n};\n\nconst Detail: React.FC = () => {\n  return (\n    <Row style={{ margin: 0 }}>\n      <Col sm={12} md={8} style={{ padding: 0 }}>\n        <GoogleMap />\n      </Col>\n    </Row>\n  )\n};\n\nconst App: React.FC = () => {\n  const [toasts, setToasts] = useState([] as ToastData[]);\n  const [pagetype, setPagetype] = useState('list' as PageType);\n\n  useEffect(() => {\n    fetchHotPepper({ lat: 34.67, lng: 135.52, range: 5, order: 4 }, (json: HotPepperResult) => {\n      console.log(json);\n      const shop_info: ToastData[] = json.results.shop.map((shop) => {\n        return {title: shop.name, info: '500m', body: shop.catch}\n      });\n      setToasts(shop_info);\n    });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Header/>\n      <Container fluid={true} >\n        <div style={{ visibility: pagetype === 'list' ? 'visible' : 'hidden', position: 'absolute', width: '100%', height: '100%'}}>\n          <List toasts={toasts} setPagetype={setPagetype}/>\n        </div>\n        <div style={{ visibility: pagetype === 'detail' ? 'visible' : 'hidden', position: 'absolute', width: '100%', height: '100%'}}>\n          <Detail />\n        </div>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// Hot Pepper API ( https://webservice.recruit.co.jp/hotpepper/reference.html )\n\nexport type HotPepperQuery = {\n  lat?: number,\n  lng?: number,\n  range?: number,\n  order?: number\n};\n\nexport type HotPepperResult = {\n  results: {\n    api_version: string;\n    results_available: number;\n    results_returned: number;\n    results_start: number;\n    shop: Shop[];\n  }\n};\n\ntype Shop = {\n  id: string,\n  name: string;\n  logo_image: string,\n  name_kana: string,\n  address: string,\n  station_name: string,\n  ktai_coupon: number,\n  lat: number;\n  lng: number;\n  catch: string;\n  photo: {pc: {l: string, m:string, s: string}}\n};\n\nexport const fetchHotPepper = (query: HotPepperQuery, callbuck: (json: HotPepperResult) => void) => {\n  const query_str = Object.keys(query).reduce((pre:string, key: string) => `${pre}&${key}=${query[key as keyof HotPepperQuery]}`, '');\n  (window as any)['HotPepperCallBack'] = callbuck;\n  const sc = document.createElement(\"script\");\n  sc.type = 'text/javascript';\n  sc.src = `https://webservice.recruit.co.jp/hotpepper/gourmet/v1/?key=${process.env['REACT_APP_HOTPEPPER_API_KEY']}${query_str}&format=jsonp&callback=HotPepperCallBack`;\n  const parent = document.getElementsByTagName(\"script\")[0];\n  parent!.parentNode!.insertBefore(sc, parent);\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}