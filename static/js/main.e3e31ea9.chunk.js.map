{"version":3,"sources":["components/Header/Header.tsx","components/GoogleMap/GoogleMap.tsx","components/Toasts/Toasts.tsx","App.tsx","logic/geolocation.ts","logic/hotpepper.ts","logic/distance.ts","serviceWorker.ts","index.tsx"],"names":["Header","props","Navbar","fixed","id","expand","variant","Brand","onClick","e","setPagetype","Toggle","aria-controls","Collapse","Nav","className","ty","Link","switchLink","pagetype","GoogleMap","useState","map","setMap","useEffect","crd","lat","latitude","lng","longitude","_map","google","maps","Map","document","getElementById","zoom","center","setCenter","style","height","width","Toast","closeButton","title","Math","round","dist","Body","body","Toasts","group","credit","toasts","toast","key","HotpepperCredit","href","ListView","console","log","placelists","Row","margin","Object","keys","toObject","pl_key","Col","md","lg","get","MapView","sm","Card","Img","src","Title","Text","App","setPlacelists","setCrd","selectedGroup","setFunc","navigator","geolocation","getCurrentPosition","pos","coords","query","callbuck","query_str","reduce","pre","window","sc","createElement","type","process","parent","getElementsByTagName","parentNode","insertBefore","fetchHotPepper","range","order","json","shop_info","results","shop","name","origin","destination","geometry","spherical","computeDistanceBetween","LatLng","catch","sort","a","b","p","set","marginTop","Container","fluid","visibility","position","placelist","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","ReactDOM","render","URL","addEventListener","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e3e31ea9.chunk.js","sourcesContent":["import React from 'react';\nimport {Nav, Navbar} from 'react-bootstrap';\nimport {PageType} from '../../App';\nimport './Header.css';\n\ntype HeaderProps = {\n  pagetype: PageType,\n  setPagetype: (ty: PageType) => void\n};\n\nconst Header: React.FC<HeaderProps> = (props) => {\n\n  const switchLink = (ty: PageType) => {\n    switch(ty){\n      case 'map':\n        return <Nav.Link onClick={(e: any) => props.setPagetype('list')}>List</Nav.Link>;\n      case 'list':\n        return <Nav.Link onClick={(e: any) => props.setPagetype('map')}>Map</Nav.Link>\n    }\n  };\n  return (\n    <Navbar fixed='top' id='Header' expand=\"lg\" variant='dark' >\n      <Navbar.Brand onClick={(e: any) => props.setPagetype('list')}>WWWelcome</Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      <Navbar.Collapse id=\"basic-navbar-nav\">\n        <Nav className=\"mr-auto\">\n          {switchLink(props.pagetype)}\n        </Nav>\n      </Navbar.Collapse>\n    </Navbar>\n  )\n};\n\nexport default Header;","import React, { useState, useEffect } from 'react';\nimport { PlaceList } from '../../App';\n\ntype GoogleMapProps = {\n  placelist: PlaceList | null,\n  crd: Coordinates | null,\n  setCrd: (crd: Coordinates | null) => void\n};\n\nconst GoogleMap: React.FC<GoogleMapProps> = (props) => {\n  const [map, setMap] = useState(null as google.maps.Map | null);\n  useEffect(() => {\n    const crd = props.crd ? { lat: props.crd.latitude, lng: props.crd.longitude } : { lat: -25.344, lng: 131.036 };\n    const _map = new google.maps.Map(document.getElementById('map')!, { zoom: 17, center: crd })\n    setMap(_map);\n  }, []);\n\n  useEffect(() => {\n    if(map){\n      map.setCenter(props.crd ? { lat: props.crd.latitude, lng: props.crd.longitude } : { lat: -25.344, lng: 131.036 })\n    }\n  }, [props.crd])\n  return (\n    <div id='map' style={{ height: '80vh', width: '100%'}}></div>\n  );\n};\n\nexport default GoogleMap;","import React from 'react';\nimport { Toast as BToast } from 'react-bootstrap';\nimport \"./Toasts.css\";\n\nexport type ToastData = {\n  title: string;\n  dist: number;\n  body: string;\n};\n\nexport type ToastProps = ToastData & {\n  onClick: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void\n};\n\nconst Toast: React.FC<ToastProps> = (props: ToastProps) => {\n  return (\n    <BToast onClick={(e) => props.onClick(e)}>\n      <BToast.Header closeButton={false}>\n        <strong className='mr-auto'>{props.title}</strong>\n        <small>{`${Math.round(props.dist)} m`}</small>\n      </BToast.Header>\n      <BToast.Body>\n        {props.body}\n      </BToast.Body>\n    </BToast>\n  );\n};\n\nexport type ToastsProps = {\n  toasts: ToastData[];\n  group: string;\n  credit?: JSX.Element;\n  onClick: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void\n};\n\nconst Toasts: React.FC<ToastsProps> = (props: ToastsProps) => {\n  return (\n    <div className=\"toasts\">\n      <BToast className=\"Group-header\">\n        <BToast.Body>\n          <strong className='mr-auto'>{props.group}</strong>\n          <small>{props.credit}</small>\n        </BToast.Body>\n      </BToast>\n      {props.toasts.map((toast, key) => <Toast key={key} onClick={props.onClick} {...toast}/>)}\n    </div>\n  );\n};\n\nexport default Toasts;\n","import React, { useState, useEffect } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Header from './components/Header/Header';\nimport GoogleMap from './components/GoogleMap/GoogleMap';\nimport { fetchHotPepper, HotPepperResult } from './logic/hotpepper';\nimport { getPosition } from './logic/geolocation';\nimport { calcDistance } from './logic/distance';\nimport Toasts, {ToastData} from './components/Toasts/Toasts';\nimport { Container, Row, Col, Card } from 'react-bootstrap';\nimport { Map } from 'immutable'; \n\nconst HotpepperCredit = <> Powered by <a href=\"http://webservice.recruit.co.jp/\">ホットペッパー Webサービス</a> </>;\n\nexport type PageType = 'list' | 'map';\n\nexport type PlaceList = {\n  group: string,\n  toasts: ToastData[],\n  credit: JSX.Element\n}\n\ntype ListViewProps = {\n  placelists: Map<string, PlaceList>,\n  setPagetype: (ty: PageType) => void\n}\n\nconst ListView: React.FC<ListViewProps> = (props) => {\n  console.log(props.placelists)\n  return(\n    <Row style={{ margin: 0 }}>\n      {Object.keys(props.placelists.toObject()).map((pl_key: string, key) => (\n        <Col key={key} md={6} lg={3}>\n          <Toasts toasts={props.placelists.get(pl_key)!.toasts} group={props.placelists.get(pl_key)!.group} credit={props.placelists.get(pl_key)!.credit} onClick={() => props.setPagetype('map')} />\n        </Col>\n      ))}\n    </Row>\n  );\n};\n\ntype MapViewProps = {\n  placelist: PlaceList | null,\n  crd: Coordinates | null,\n  setCrd: (crd: Coordinates | null) => void\n};\n\nconst MapView: React.FC<MapViewProps> = (props) => {\n  return (\n    <Row>\n      <Col sm={12} md={8}>\n        <GoogleMap {...props}/>\n      </Col>\n      <Col sm={12} md={4}>\n        <Card>\n          <Card.Img variant=\"top\" src=\"holder.js/100px180\" />\n          <Card.Body>\n            <Card.Title>Card Title</Card.Title>\n            <Card.Text>\n              Some quick example text to build on the card title and make up the bulk of\n              the card's content.\n            </Card.Text>\n          </Card.Body>\n        </Card>\n      </Col>\n    </Row>\n  )\n};\n\nconst App: React.FC = () => {\n  const [placelists, setPlacelists] = useState(Map({}) as Map<string, PlaceList>);\n  const [pagetype, setPagetype] = useState('list' as PageType);\n  const [crd, setCrd] = useState(null as Coordinates | null);\n  const [selectedGroup, setSelectedGroup] = useState(null as null | string);\n\n  useEffect(() => { getPosition(setCrd); }, []);\n\n  useEffect(() => {\n    if(crd){\n      fetchHotPepper({ lat: crd.latitude, lng: crd.longitude, range: 5, order: 4 }, (json: HotPepperResult) => {\n        console.log(json);\n        const shop_info: ToastData[] = json.results.shop.map((shop) => {\n          return { title: shop.name, dist: calcDistance({ lat: crd.latitude, lng: crd.longitude }, { lat: shop.lat, lng: shop.lng }), body: shop.catch }\n        });\n        shop_info.sort((a, b) => {\n          if (a.dist < b.dist) {\n            return -1;\n          } else if (a.dist > b.dist) {\n            return 1;\n          } else {\n            return 0;\n          }\n        });\n        setPlacelists(p => p.set('付近の飲食店', { group: '付近の飲食店', toasts: shop_info, credit: HotpepperCredit }))\n      });\n    }\n    \n  }, [crd]);\n\n  return (\n    <div className=\"App\">\n      <Header pagetype={pagetype} setPagetype={setPagetype}/>\n      <div style={{marginTop: '56px'}}>\n        <Container fluid={true} style={{ visibility: pagetype === 'list' ? 'visible' : 'hidden', position: 'absolute'}} >\n          <ListView placelists={placelists} setPagetype={setPagetype}/>\n        </Container>\n        <Container fluid={true} style={{ visibility: pagetype === 'map' ? 'visible' : 'hidden', position: 'absolute', width: '100%', height: '100%'}} >\n          <MapView placelist={selectedGroup ? placelists.get(selectedGroup)! : null} crd={crd} setCrd={setCrd} />\n        </Container>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","\n\nexport const getPosition = (setFunc: (crd: Coordinates) => void) => {\n  const success: PositionCallback = (pos: Position) => {\n    setFunc(pos.coords);\n  };\n  const error: PositionErrorCallback = (e: PositionError) => {\n    console.log(e);\n  };\n  navigator.geolocation.getCurrentPosition(success, error);\n};\n","// Hot Pepper API ( https://webservice.recruit.co.jp/hotpepper/reference.html )\n\nexport type HotPepperQuery = {\n  lat?: number,\n  lng?: number,\n  range?: number,\n  order?: number\n};\n\nexport type HotPepperResult = {\n  results: {\n    api_version: string;\n    results_available: number;\n    results_returned: number;\n    results_start: number;\n    shop: Shop[];\n  }\n};\n\ntype Shop = {\n  id: string,\n  name: string;\n  logo_image: string,\n  name_kana: string,\n  address: string,\n  station_name: string,\n  ktai_coupon: number,\n  lat: number;\n  lng: number;\n  catch: string;\n  photo: {pc: {l: string, m:string, s: string}}\n};\n\nexport const fetchHotPepper = (query: HotPepperQuery, callbuck: (json: HotPepperResult) => void) => {\n  const query_str = Object.keys(query).reduce((pre:string, key: string) => `${pre}&${key}=${query[key as keyof HotPepperQuery]}`, '');\n  (window as any)['HotPepperCallBack'] = callbuck;\n  const sc = document.createElement(\"script\");\n  sc.type = 'text/javascript';\n  sc.src = `https://webservice.recruit.co.jp/hotpepper/gourmet/v1/?key=${process.env['REACT_APP_HOTPEPPER_API_KEY']}${query_str}&format=jsonp&callback=HotPepperCallBack`;\n  const parent = document.getElementsByTagName(\"script\")[0];\n  parent!.parentNode!.insertBefore(sc, parent);\n};","\nexport const calcDistance = (origin: { lat: number, lng: number }, destination: { lat: number, lng: number }) => {\n  return google.maps.geometry.spherical.computeDistanceBetween(new google.maps.LatLng(origin.lat, origin.lng), new google.maps.LatLng(destination.lat, destination.lng));\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}